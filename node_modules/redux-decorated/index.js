'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.createActions = createActions;
exports.action = action;
exports.createReducer = createReducer;
exports.clone = clone;
exports.updateIn = updateIn;
exports.removeIn = removeIn;

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function createActions(actions) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$prefix = _ref.prefix,
      prefix = _ref$prefix === undefined ? '' : _ref$prefix;

  return Object.freeze(Object.keys(actions).reduce(function (actions, type) {
    return _extends({}, actions, _defineProperty({}, type, Object.assign({ type: '' + prefix + type }, actions[type])));
  }, actions));
}

function action(action, payload) {
  return {
    type: action.type,
    payload: payload
  };
}

function createReducer(initialState) {
  var actionHandlers = [];

  function reducer(state, action) {
    return actionHandlers.filter(function (actionHandler) {
      return actionHandler.type === action.type;
    }).reduce(function (state, actionHandler) {
      return actionHandler.handler(state, action.payload);
    }, state || initialState);
  }

  function builder(state, action) {
    return reducer(state, action);
  }

  builder.when = function (action, _handler) {
    actionHandlers.push({ type: action.type, handler: function handler(state, action) {
        var newState = _handler(state, action);

        if (typeof newState === 'function') {
          return newState(state);
        }
        return newState;
      } });
    return builder;
  };

  builder.build = function () {
    return reducer;
  };

  return builder;
}

function clone(object) {
  return Array.isArray(object) ? [].concat(_toConsumableArray(object)) : _extends({}, object);
}

function updateIn(path, newValue, object) {
  if (arguments.length == 2) {
    return function (object) {
      return updateIn(path, newValue, object);
    };
  }

  if (Array.isArray(path) && path.length > 1) {
    newValue = updateIn(path.slice(1), newValue, (object || {})[path[0]]);
  }

  var key = Array.isArray(path) ? path[0] : path;
  var cloned = clone(object);
  cloned[key] = newValue;

  return cloned;
}

function removeIn(path, object) {
  if (arguments.length === 1) {
    return function (object) {
      return removeIn(path, object);
    };
  }

  if (Array.isArray(path) && path.length > 1) {
    var newValue = removeIn(path.slice(1), (object || {})[path[0]]);
    return updateIn(path[0], newValue, object);
  }

  var key = Array.isArray(path) ? path[0] : path;
  var cloned = clone(object);
  delete cloned[key];

  return cloned;
}