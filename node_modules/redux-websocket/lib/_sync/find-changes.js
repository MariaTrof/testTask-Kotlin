"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var redux_decorated_1 = require('redux-decorated');
function findChanges() {
    var newState = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var oldState = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    var path = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];

    var newKeys = Object.keys(newState);
    var oldKeys = Object.keys(oldState);
    var newChanges = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = newKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var key = _step.value;

            if (newChanges.length > 2 && newChanges.length / newKeys.length > 0.4) {
                break;
            }
            if (newState[key] !== oldState[key]) {
                if (_typeof(newState[key]) !== 'object' || newState[key] === null || _typeof(oldState[key]) !== 'object' || oldState[key] === null || _typeof(oldState[key]) === undefined) {
                    newChanges.push({
                        path: [].concat(_toConsumableArray(path), [key]),
                        value: newState[key]
                    });
                } else {
                    newChanges = newChanges.concat(findChanges(newState[key], oldState[key], [].concat(_toConsumableArray(path), [key])));
                }
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
        for (var _iterator2 = oldKeys[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var key = _step2.value;

            if (newChanges.length > 2 && newChanges.length / newKeys.length > 0.4) {
                break;
            }
            if (newState[key] === undefined) {
                newChanges.push({
                    path: [].concat(_toConsumableArray(path), [key]),
                    removed: true
                });
            }
        }
    } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
            }
        } finally {
            if (_didIteratorError2) {
                throw _iteratorError2;
            }
        }
    }

    if (newChanges.length > 2 && newChanges.length / newKeys.length > 0.4) {
        return [{ path: path, value: newState }];
    }
    return newChanges;
}
exports.findChanges = findChanges;
function findVersionedChanges(newState, oldState, keysToSync) {
    if (!newState || !oldState) return [];
    var newVersions = newState.versions || {};
    var updates = [];
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
        for (var _iterator3 = keysToSync[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var key = _step3.value;

            var changes = findChanges(newState[key], oldState[key]);
            if (changes.length > 0) {
                updates.push({ key: key, changes: changes, version: newVersions[key] });
            }
        }
    } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                _iterator3.return();
            }
        } finally {
            if (_didIteratorError3) {
                throw _iteratorError3;
            }
        }
    }

    return updates;
}
exports.findVersionedChanges = findVersionedChanges;
function applyChanges(oldState, versionedChanges, keysToSync) {
    var stateVersions = oldState['versions'] || {};
    var shouldCheckVersions = false;
    var state = oldState;
    versionedChanges = versionedChanges.filter(function (_ref) {
        var key = _ref.key;
        return keysToSync.indexOf(key) !== -1;
    });
    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
        for (var _iterator4 = versionedChanges[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var _step4$value = _step4.value;
            var key = _step4$value.key;
            var version = _step4$value.version;
            var changes = _step4$value.changes;

            if (version !== stateVersions[key] + 1) {
                shouldCheckVersions = true;
                continue;
            }
            state = redux_decorated_1.updateIn(['versions', key], version, state);
            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
                for (var _iterator5 = changes[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var _step5$value = _step5.value;
                    var path = _step5$value.path;
                    var value = _step5$value.value;
                    var removed = _step5$value.removed;

                    state = removed ? redux_decorated_1.removeIn([key].concat(_toConsumableArray(path)), state) : redux_decorated_1.updateIn([key].concat(_toConsumableArray(path)), value, state);
                }
            } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                        _iterator5.return();
                    }
                } finally {
                    if (_didIteratorError5) {
                        throw _iteratorError5;
                    }
                }
            }
        }
    } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion4 && _iterator4.return) {
                _iterator4.return();
            }
        } finally {
            if (_didIteratorError4) {
                throw _iteratorError4;
            }
        }
    }

    return { shouldCheckVersions: shouldCheckVersions, state: state };
}
exports.applyChanges = applyChanges;