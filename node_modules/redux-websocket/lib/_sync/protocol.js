"use strict";

var constants_1 = require('./constants');
var get_new_versions_1 = require('./get-new-versions');
function checkVersionFunction(skipVersion) {
    return function (getState, clientVersions, respond) {
        var newVersions = get_new_versions_1.getNewVersions(clientVersions, getState, skipVersion);
        if (newVersions) {
            respond({
                type: constants_1.dispatchAction,
                payload: Object.assign({ payload: newVersions }, constants_1.actions.initialSyncedState)
            });
        }
    };
}
exports.checkVersionFunction = checkVersionFunction;
function createClientProtocol(getState, dispatch) {
    var rehydrationCompleted = false;
    var webSocketOpened = false;
    var protocol = {
        onopen: function onopen() {
            webSocketOpened = true;
            this.maybeCheckVersion();
        },
        onmessage: function onmessage(_ref, respond) {
            var type = _ref.type;
            var payload = _ref.payload;

            switch (type) {
                case constants_1.dispatchAction:
                    if (constants_1.actions[payload.type]) {
                        dispatch(payload);
                    }
                    break;
            }
        },
        setRehydrationCompleted: function setRehydrationCompleted() {
            rehydrationCompleted = true;
        },
        maybeCheckVersion: function maybeCheckVersion() {
            if (webSocketOpened && rehydrationCompleted) {
                this.send({ type: constants_1.checkVersion, payload: { versions: getState().versions } });
            }
        }
    };
    return protocol;
}
exports.createClientProtocol = createClientProtocol;
function createServerProtocol(checkVersionFunction, getState) {
    var connections = {};
    var protocol = {
        onclose: function onclose(connectionId) {
            delete connections[connectionId];
        },
        onmessage: function onmessage(_ref2, respond) {
            var type = _ref2.type;
            var payload = _ref2.payload;

            switch (type) {
                case constants_1.checkVersion:
                    checkVersionFunction(getState, payload.versions, respond);
                    break;
            }
        },
        sendToStoreClients: function sendToStoreClients(message) {
            var _this = this;

            Object.keys(connections).forEach(function (connectionId) {
                return _this.sendTo(connectionId, message);
            });
        }
    };
    return protocol;
}
exports.createServerProtocol = createServerProtocol;