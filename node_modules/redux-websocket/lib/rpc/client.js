"use strict";

var index_1 = require('./index');
function createRpcClient(_ref) {
    var socket = _ref.socket;
    var id = _ref.id;
    var rpcObjects = _ref.rpcObjects;

    var nextCallId = 0;
    var waitingCalls = {};
    var webSocketProtocol = {
        onmessage: function onmessage(_ref2) {
            var id = _ref2.id;
            var error = _ref2.error;
            var value = _ref2.value;

            var call = waitingCalls[id];
            if (call) {
                call(error, value);
            }
        }
    };
    socket.registerProtocol('rpc' + (id || ''), webSocketProtocol);
    rpcObjects.forEach(function (rpcObject) {
        var constructor = rpcObject.constructor;
        var className = constructor[index_1.nameSymbol] || constructor.name;
        var timeout = constructor[index_1.timeoutSymbol] === undefined ? 10000 : constructor[index_1.timeoutSymbol];
        var methods = Object.getOwnPropertyNames(constructor.prototype).filter(function (key) {
            return key !== 'constructor';
        }).filter(function (key) {
            return typeof constructor.prototype[key] === 'function';
        });
        methods.forEach(function (methodName) {
            rpcObject[methodName] = function () {
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                }

                var callId = nextCallId++;
                webSocketProtocol.send({
                    id: callId,
                    className: className,
                    methodName: methodName,
                    args: args
                });
                return new Promise(function (resolve, reject) {
                    var timeoutId = setTimeout(function () {
                        delete waitingCalls[callId];
                        reject('timeout reached');
                    }, timeout);
                    waitingCalls[callId] = function (error, value) {
                        clearTimeout(timeoutId);
                        delete waitingCalls[callId];
                        if (error) {
                            reject(error);
                        } else {
                            resolve(value);
                        }
                    };
                });
            };
        });
    });
}
exports.createRpcClient = createRpcClient;