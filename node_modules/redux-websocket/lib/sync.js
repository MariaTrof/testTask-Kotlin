"use strict";

var diffing_middleware_1 = require('./_sync/diffing-middleware');
var protocol_1 = require('./_sync/protocol');
var reducer_1 = require('./_sync/reducer');
var track_rehydration_middleware_1 = require('./_sync/track-rehydration-middleware');
exports.syncStoreEnhancer = function (settings) {
    return function (next) {
        return function (reducer, initialState) {
            var store = undefined;
            var protocol = protocol_1.createClientProtocol(function () {
                return store.getState();
            }, function (action) {
                return store.dispatch(action);
            });
            reducer = reducer_1.syncReducer(settings, protocol, reducer);
            store = next(reducer, initialState);
            var dispatch = track_rehydration_middleware_1.trackRehydrationMiddleware(settings, protocol)(store)(store.dispatch);
            settings.socket.registerProtocol('sync', protocol);
            return Object.assign({}, store, { dispatch: dispatch });
        };
    };
};
function noopReducer(state) {
    return state || {};
}
exports.noopReducer = noopReducer;
function createSyncServer(settings) {
    var connectionToProtocol = {};
    var globalProtocol = {
        onclose: function onclose(connectionId) {
            var protocol = connectionToProtocol[connectionId];
            if (protocol) {
                connectionToProtocol[connectionId].onclose(connectionId);
                delete connectionToProtocol[connectionId];
            }
        },
        onmessage: function onmessage(message, respond, connectionId) {
            var protocol = connectionToProtocol[connectionId];
            if (protocol) {
                connectionToProtocol[connectionId].onmessage(message, respond, connectionId);
            }
        }
    };
    settings.socket.registerProtocol('sync', globalProtocol);
    return {
        createSyncMiddleware: function createSyncMiddleware() {
            var protocol = undefined;
            function addConnection(connectionId) {
                connectionToProtocol[connectionId] = protocol;
            }
            var syncMiddleware = function syncMiddleware(store) {
                return function (next) {
                    protocol = protocol_1.createServerProtocol(protocol_1.checkVersionFunction(settings.skipVersion), function () {
                        return store.getState();
                    });
                    return diffing_middleware_1.diffingMiddleware(settings, protocol)(store)(next);
                };
            };
            return { addConnection: addConnection, syncMiddleware: syncMiddleware };
        }
    };
}
exports.createSyncServer = createSyncServer;